import sys
import re
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
import numpy as np
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QFileDialog, QListWidget,
    QVBoxLayout, QPushButton, QRadioButton,
    QHBoxLayout, QInputDialog, QCheckBox, QWidget, QLineEdit, QColorDialog, QLabel, QMessageBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
import os
from scipy import sparse
from scipy.sparse.linalg import spsolve

# Define a UniWien color palette
UNIWEN_COLORS = ["#002147", "#d71920", "#ffcc00", "#4e7ab1", "#8fb339", "#6d6e70", "#005f83", "#ff9d00"]

class XRDPlotter(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("XRD Data Plotter")
        self.file_list = []
        self.reference_data = None  # Store reference data

        # Central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # File list widget
        self.list_widget = QListWidget()
        self.list_widget.setDragDropMode(QListWidget.InternalMove)
        self.list_widget.model().rowsMoved.connect(self.reorder_files)  # Connect to reorder_files
        layout.addWidget(self.list_widget)

        # Add and Remove buttons
        button_layout = QHBoxLayout()
        layout.addLayout(button_layout)

        self.add_button = QPushButton("Add XRD Data Files")
        self.add_button.clicked.connect(self.add_files)
        button_layout.addWidget(self.add_button)

        self.remove_button = QPushButton("Remove Selected Files")
        self.remove_button.clicked.connect(self.remove_files)
        button_layout.addWidget(self.remove_button)

        # Edit Custom Name button
        self.edit_name_button = QPushButton("Edit Custom Name")
        self.edit_name_button.clicked.connect(self.edit_custom_name)
        button_layout.addWidget(self.edit_name_button)

        # Change Color button
        self.change_color_button = QPushButton("Change Color")
        self.change_color_button.clicked.connect(self.change_color)
        button_layout.addWidget(self.change_color_button)

        # Load Reference File button
        self.load_reference_button = QPushButton("Load Reference File")
        self.load_reference_button.clicked.connect(self.load_reference_file)
        layout.addWidget(self.load_reference_button)

        # Plot options
        self.radio_separate = QRadioButton("Separate")
        self.radio_separate.setChecked(True)
        self.radio_overlap = QRadioButton("Overlap")
        self.radio_3d = QRadioButton("3D Plot")
        plot_option_layout = QHBoxLayout()
        plot_option_layout.addWidget(self.radio_separate)
        plot_option_layout.addWidget(self.radio_overlap)
        plot_option_layout.addWidget(self.radio_3d)
        layout.addLayout(plot_option_layout)

        # Offset input for separate plots
        self.offset_input = QLineEdit(self)
        self.offset_input.setPlaceholderText("Enter offset for separate plots (e.g., 1000)")
        layout.addWidget(self.offset_input)

        # Cutoff input for ignoring data below a certain angle
        self.cutoff_input = QLineEdit(self)
        self.cutoff_input.setPlaceholderText("Enter cutoff angle (e.g., 3)")
        layout.addWidget(self.cutoff_input)

        # Plot button
        self.plot_button = QPushButton("Plot Data")
        self.plot_button.clicked.connect(self.plot_data)
        layout.addWidget(self.plot_button)

        # Preview button
        self.preview_button = QPushButton("Preview Plot")
        self.preview_button.clicked.connect(self.preview_plot)
        layout.addWidget(self.preview_button)

        # Preview label
        self.preview_label = QLabel()
        self.preview_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.preview_label)

        # Remove Y-Axis Labels option
        self.remove_y_axis_labels_checkbox = QCheckBox("Remove Y-Axis Labels")
        layout.addWidget(self.remove_y_axis_labels_checkbox)

        # X-Axis Tick input
        self.x_axis_ticks_input = QLineEdit(self)
        self.x_axis_ticks_input.setPlaceholderText("Enter step size for x-axis ticks (e.g., 5)")
        layout.addWidget(self.x_axis_ticks_input)

        # Baseline correction option
        self.baseline_correction_checkbox = QCheckBox("Apply ALS Baseline Correction")
        layout.addWidget(self.baseline_correction_checkbox)

    def add_files(self):
        filenames, _ = QFileDialog.getOpenFileNames(self, "Select XRD Data Files", "",
                                                    "All Files (*);;TXT Files (*.txt);;CSV Files (*.csv);;TSV Files (*.tsv)")
        for filename in filenames:
            color = self.get_default_color()

            # Prompt for a custom name
            custom_name, ok = QInputDialog.getText(self, "Custom Name", f"Enter a custom name for {os.path.basename(filename)}:")
            if not ok or not custom_name:  # If the user cancels or doesn't enter a name, use the base name
                custom_name = os.path.splitext(os.path.basename(filename))[0]

            self.file_list.append({"filename": filename, "color": color, "custom_name": custom_name})
            self.list_widget.addItem(f"{custom_name} (Color: {color})")

    def remove_files(self):
        for item in self.list_widget.selectedItems():
            index = self.list_widget.row(item)
            self.list_widget.takeItem(index)
            self.file_list.pop(index)

    def edit_custom_name(self):
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return

        item = selected_items[0]
        index = self.list_widget.row(item)
        current_name = self.file_list[index]["custom_name"]

        new_name, ok = QInputDialog.getText(self, "Edit Custom Name", "Enter new custom name:", text=current_name)
        if ok and new_name:
            self.file_list[index]["custom_name"] = new_name
            self.list_widget.item(index).setText(f"{new_name} (Color: {self.file_list[index]['color']})")

    def change_color(self):
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return

        item = selected_items[0]
        index = self.list_widget.row(item)
        current_color = self.file_list[index]["color"]

        color = QColorDialog.getColor()
        if color.isValid():
            new_color = color.name()
            self.file_list[index]["color"] = new_color
            self.list_widget.item(index).setText(f"{self.file_list[index]['custom_name']} (Color: {new_color})")

    def get_default_color(self):
        color_index = len(self.file_list) % len(UNIWEN_COLORS)
        return UNIWEN_COLORS[color_index]

    def load_reference_file(self):
        filename, _ = QFileDialog.getOpenFileName(self, "Select Reference File", "",
                                                  "All Files (*);;TXT Files (*.txt);;CSV Files (*.csv);;TSV Files (*.tsv)")
        if filename:
            try:
                self.reference_data = self.parse_xrd_file(filename)
                print(f"Reference file {filename} loaded successfully.")
            except Exception as e:
                print(f"Error loading reference file: {e}")

    def parse_xrd_file(self, filename):
        if filename.endswith(".tsv"):
            data = pd.read_csv(filename, sep='\t', header=None, names=["Angle", "Intensity"])
        elif filename.endswith(".xy"):
            # Read .xy files with space-separated values
            data = pd.read_csv(filename, sep='\s+', header=None, names=["Angle", "Intensity"])
        else:
            with open(filename, 'r') as file:
                lines = file.readlines()

            data_start = None
            for i, line in enumerate(lines):
                if "[Scan points]" in line:
                    data_start = i + 1
                    break

            if data_start is None:
                raise ValueError(f"No scan points found in {filename}.")

            data = []
            for line in lines[data_start:]:
                line = line.strip()
                if re.match(r'^\s*$', line):  # Skip empty lines
                    continue
                parts = line.split(',')
                if len(parts) >= 4:
                    try:
                        angle = float(parts[0])
                        intensity = float(parts[2])
                        data.append((angle, intensity))
                    except ValueError:
                        continue

            if not data:
                raise ValueError(f"No valid data found in {filename}.")

            data = pd.DataFrame(data, columns=["Angle", "Intensity"])

        # Ensure data contains no NaNs
        data = data.dropna()

        return data

    def als_baseline_correction(self, intensity, lam=1e5, p=0.01, niter=10):
        intensity = np.asarray(intensity, dtype=np.float64)
        if len(intensity.shape) > 1:
            raise ValueError("Intensity data must be 1D for baseline correction.")

        L = len(intensity)
        D = sparse.diags([1, -2, 1], [0, -1, -2], shape=(L, L-2))  # Corrected D matrix
        w = np.ones(L)

        for i in range(niter):
            W = sparse.diags(w, 0)
            Z = W + lam * D.dot(D.T)
            baseline = spsolve(Z, w * intensity)
            w = p * (intensity > baseline) + (1 - p) * (intensity <= baseline)

        return intensity - baseline

    def reorder_files(self):
        """Update the file_list to match the new order of items in the QListWidget."""
        new_file_list = []
        for i in range(self.list_widget.count()):
            item_text = self.list_widget.item(i).text()
            custom_name = item_text.split(" (Color: ")[0]
            for file_info in self.file_list:
                if file_info["custom_name"] == custom_name:
                    new_file_list.append(file_info)
                    break
        self.file_list = new_file_list

    def filter_data(self, data):
        """Filter data based on the cutoff angle specified in the GUI."""
        try:
            cutoff = float(self.cutoff_input.text())
        except ValueError:
            cutoff = 0  # Default to no cutoff if input is invalid

        if cutoff > 0:
            data = data[data["Angle"] >= cutoff]
        return data

    def plot_data(self):
        if not self.file_list:
            return

        plot_option = "Separate" if self.radio_separate.isChecked() else "Overlap"
        is_3d = self.radio_3d.isChecked()
        remove_y_axis_labels = self.remove_y_axis_labels_checkbox.isChecked()
        apply_baseline_correction = self.baseline_correction_checkbox.isChecked()

        # Get x-axis ticks step size from input
        x_ticks_input = self.x_axis_ticks_input.text()
        if x_ticks_input:
            try:
                step_size = float(x_ticks_input)
                x_max = max(self.parse_xrd_file(file_info["filename"])["Angle"].max() for file_info in self.file_list)
                x_ticks = np.arange(0, x_max + step_size, step_size)
            except ValueError:
                print("Invalid x-axis step size.")
                x_ticks = None
        else:
            x_ticks = None

        # Get offset for separate plots
        offset = 0
        offset_input = self.offset_input.text()
        if offset_input:
            try:
                offset = float(offset_input)
            except ValueError:
                print("Invalid offset value.")
                offset = 0

        if is_3d:
            fig = plt.figure(figsize=(10, 6))
            ax = fig.add_subplot(111, projection='3d')
            for i, file_info in enumerate(self.file_list):
                try:
                    data = self.parse_xrd_file(file_info["filename"])
                    data = self.filter_data(data)  # Use the updated filter_data method
                    twotheta = data["Angle"]
                    intensity = data["Intensity"]

                    # Apply baseline correction if selected
                    if apply_baseline_correction:
                        intensity = self.als_baseline_correction(intensity)

                    ax.plot(twotheta, [i] * len(twotheta), intensity, label=file_info["custom_name"], color=file_info["color"])
                except Exception as e:
                    print(f"Error reading file {file_info['filename']}: {e}")

            ax.set_xlabel("2θ (degrees)")
            ax.set_ylabel("File Index")
            ax.set_zlabel("Intensity (a.u.)")
            ax.legend()
        else:
            fig, ax = plt.subplots(figsize=(10, 6))
            offset_factor = offset  # Use the user-defined offset
            for file_info in self.file_list:
                try:
                    data = self.parse_xrd_file(file_info["filename"])
                    data = self.filter_data(data)  # Use the updated filter_data method
                    twotheta = data["Angle"]
                    intensity = data["Intensity"]

                    # Apply baseline correction if selected
                    if apply_baseline_correction:
                        intensity = self.als_baseline_correction(intensity)

                    if plot_option == "Separate":
                        intensity = intensity + offset_factor
                        offset_factor += offset  # Increment by the user-defined offset

                    ax.plot(twotheta, intensity, label=file_info["custom_name"], color=file_info["color"])
                except Exception as e:
                    print(f"Error reading file {file_info['filename']}: {e}")

            # Plot reference data on a secondary y-axis if loaded
            if self.reference_data is not None:
                ref_data = self.filter_data(self.reference_data)
                ax2 = ax.twinx()  # Create a secondary y-axis
                ax2.plot(ref_data["Angle"], ref_data["Intensity"], label="Reference", color="black", linestyle="-")
                ax2.set_ylabel("Reference Intensity (a.u.)")

            ax.set_xlabel("2θ (degrees)")
            ax.set_ylabel("Intensity (a.u.)")
            ax.legend(loc="upper left")
            if self.reference_data is not None:
                ax2.legend(loc="upper right")
            ax.grid(True)

            if x_ticks is not None:
                ax.set_xticks(x_ticks)  # Use custom x-axis ticks if provided
            if remove_y_axis_labels:
                ax.set_yticks([])  # Remove y-axis ticks

        plt.tight_layout()
        plt.show()

    def preview_plot(self):
        """Preview the plot without fully rendering it."""
        if not self.file_list:
            QMessageBox.warning(self, "Warning", "No files to preview.")
            return

        # Here you can implement a simple preview logic
        # For now, we will just show a message box
        QMessageBox.information(self, "Preview", "Preview functionality is not yet implemented.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = XRDPlotter()
    window.show()
    sys.exit(app.exec_())